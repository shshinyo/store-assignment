export interface ProblemDetails {
  /**
   * A URI reference that identifies the problem type. When de-referenced,
   * it provide human-readable documentation for the problem type (e.g., using HTML).
   * When this member is not present, its will return "about:blank".
   */
  type: string;
  /**
   * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence
   * of the problem, except for purposes of localization(e.g., using proactive content negotiation;
   * see [RFC7231], Section 3.4.
   */
  title: string;
  /** The HTTP status code generated by the origin server for this occurrence of the problem. */
  status: number;
  /** A human-readable explanation specific to this occurrence of the problem. */
  detail: string;
  /** A URI reference that identifies the specific occurrence of the problem. */
  instance: string;
  /** The version of the API. */
  version: string;
  /** Timestamp in ISO format. */
  timestamp: string;
  /** Timestamp in ISO format. */
  traceId: string;
}

export interface ErrorDescriber {
  /** The code for this error. */
  code: string;
  /** The description for this error. */
  description: string;
}

/** This response will be returned if can not find an entity in database. */
export interface NotFoundProblemDetails extends ProblemDetails {
  params: {
    /** The entity name. */
    entity: string;
    /** The property value that caused the failure. */
    key: string;
  };
}

/**
 * This response will be returned if the request has a semantic errors
 * (some parameters were missing or otherwise invalid).
 */
export interface ValidationProblemDetails extends ProblemDetails {
  errors: { [key: string]: ErrorDescriber[] };
}

/** This response will be returned if can not find an entity in database. */
export interface ConflictProblemDetails extends ProblemDetails {
  errors: ErrorDescriber[];
}
